descriptor_id: PYTHON
descriptor_type: language
descriptor_flavors:
  - python
file_extensions:
  - ".py"
processing_order: -9
linters:
  # PYLINT
  - linter_name: pylint
    name: PYTHON_PYLINT
    linter_url: https://www.pylint.org
    linter_repo: https://github.com/PyCQA/pylint
    linter_rules_url: http://pylint-messages.wikidot.com/all-codes
    linter_banner_image_url: https://www.pylint.org/pylint.svg
    linter_rules_configuration_url: https://github.com/PyCQA/pylint/blob/master/pylintrc
    linter_rules_inline_disable_url: https://pylint.readthedocs.io/en/latest/user_guide/message-control.html
    cli_lint_mode: list_of_files
    config_file_name: .python-lint
    cli_config_arg_name: "--rcfile"
    cli_lint_errors_count: regex_count
    cli_lint_errors_regex: ":([0-9]+):([0-9]+):"
    examples:
      - "pylint myfile.py"
      - "pylint --rcfile .python-lint myfile.py"
    install:
      pip:
        - pylint
    ide:
      eclipse:
        - name: PyLint
          url: https://pydev.org/manual_adv_pylint.html
      idea:
        - name: PyCharm (Native Support)
          url: https://www.jetbrains.com/pycharm/
      vim:
        - name: pylint.vim
          url: https://www.vim.org/scripts/script.php?script_id=891
      visual_studio:
        - name: Native Support
          url: https://docs.microsoft.com/fr-fr/visualstudio/python/linting-python-code?view=vs-2019
      vscode:
        - name: Native Support
          url: https://code.visualstudio.com/docs/python/linting#_pylint
  # BLACK
  - linter_name: black
    name: PYTHON_BLACK
    is_formatter: true
    linter_url: https://black.readthedocs.io/en/stable/
    linter_repo: https://github.com/psf/black
    linter_banner_image_url: https://raw.githubusercontent.com/psf/black/master/docs/_static/logo2-readme.png
    linter_rules_configuration_url: https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#configuration-format
    config_file_name: pyproject.toml
    cli_config_arg_name: "--config"
    cli_lint_mode: list_of_files
    cli_lint_extra_args:
      - "--diff"
      - "--check"
    cli_lint_fix_arg_name: "--megalinter-fix-flag" # Workaround for MegaLinter
    cli_lint_fix_remove_args:
      - "--diff"
      - "--check"
    examples:
      - "black --diff --check myfile.py"
      - "black --config pyproject.toml --diff --check myfile.py"
      - "black --config pyproject.toml myfile.py" # format
    install:
      pip:
        - black
    ide:
      atom:
        - name: python-black
          url: https://atom.io/packages/python-black
      emacs:
        - name: blacken
          url: https://github.com/pythonic-emacs/blacken
        - name: reformatter.el
          url: https://github.com/purcell/reformatter.el
        - name: elpy
          url: https://github.com/jorgenschaefer/elpy
      idea:
        - name: black
          url: https://black.readthedocs.io/en/stable/editor_integration.html#pycharm-intellij-idea
      sublime:
        - name: sublack
          url: https://github.com/jgirardet/sublack
      vscode:
        - name: VsCode Python Extension
          url: https://marketplace.visualstudio.com/items?itemName=ms-python.python
  # FLAKE8
  - linter_name: flake8
    name: PYTHON_FLAKE8
    linter_url: https://flake8.pycqa.org
    linter_repo: https://github.com/PyCQA/flake8
    linter_spdx_license: MIT
    linter_rules_url: https://flake8.pycqa.org/en/latest/user/error-codes.html
    linter_rules_configuration_url: https://flake8.pycqa.org/en/latest/user/configuration.html#project-configuration
    linter_rules_inline_disable_url: https://flake8.pycqa.org/en/3.1.1/user/ignoring-errors.html#in-line-ignoring-errors
    cli_lint_mode: list_of_files
    config_file_name: .flake8
    cli_config_arg_name: "--config"
    cli_lint_errors_count: total_lines
    examples:
      - "flake8 myfile.py"
      - "flake8 --config .flake8 myfile.py"
    install:
      pip:
        - flake8
    ide:
      atom:
        - name: linter-flake8
          url: https://atom.io/packages/linter-flake8
      idea:
        - name: flake8-support
          url: https://plugins.jetbrains.com/plugin/11563-flake8-support
      vscode:
        - name: Native Support
          url: https://code.visualstudio.com/docs/python/linting#_flake8
  # ISORT
  - linter_name: isort
    name: PYTHON_ISORT
    is_formatter: true
    linter_url: https://pycqa.github.io/isort/
    linter_repo: https://github.com/PyCQA/isort
    linter_banner_image_url: https://raw.githubusercontent.com/pycqa/isort/develop/art/logo_large.png
    linter_rules_configuration_url: https://pycqa.github.io/isort/docs/configuration/config_files/
    linter_rules_inline_disable_url: https://pycqa.github.io/isort/docs/configuration/action_comments/
    cli_lint_mode: list_of_files
    config_file_name: .isort.cfg
    cli_config_arg_name: "--settings-file"
    cli_lint_extra_args:
      - "--diff"
      - "--check"
      - "--profile"
      - "black"
    cli_lint_fix_arg_name: "--megalinter-fix-flag" # Workaround for PythonBlackOrIsortLinter class behavior
    cli_lint_fix_remove_args:
      - "--diff"
      - "--check"
    cli_lint_errors_count: regex_count
    cli_lint_errors_regex: "\\@\\@ (.*) \\@\\@"
    examples:
      - "isort --diff --check --profile black myfile.py"
      - "isort --diff --check --profile black --settings-file .isort.cfg myfile.py"
      - "isort --profile black --settings-file .isort.cfg myfile.py"
    install:
      pip:
        - isort
        - black
    ide:
      atom:
        - name: atom-python-isort
          url: https://github.com/bh/atom-python-isort
        - name: atom-isort
          url: https://atom.io/packages/atom-isort
      emacs:
        - name: py-isort.el
          url: https://github.com/paetzke/py-isort.el
      sublime:
        - name: isort plugin
          url: https://github.com/jcugat/sublime-text-isort-plugin#install
      vim:
        - name: ale
          url: https://github.com/w0rp/ale
        - name: vim-isort
          url: https://github.com/fisadev/vim-isort#installation
      vscode:
        - name: VsCode Python Extension
          url: https://github.com/Microsoft/vscode-python
  # BANDIT
  - linter_name: bandit
    name: PYTHON_BANDIT
    linter_text: |
      bandit checks for security risks

      If you find it too harsh, you may define `PYTHON_BANDIT_DISABLE_ERRORS: true` in your `.mega-linter.yml` config file
    linter_url: https://bandit.readthedocs.io/en/latest/
    linter_repo: https://github.com/PyCQA/bandit
    linter_rules_url: https://bandit.readthedocs.io/en/latest/plugins/index.html#complete-test-plugin-listing
    linter_banner_image_url: https://github.com/PyCQA/bandit/raw/master/logo/logotype-sm.png
    linter_image_url: https://github.com/PyCQA/bandit/raw/master/logo/logomark.png
    linter_rules_configuration_url: https://bandit.readthedocs.io/en/latest/config.html#
    linter_rules_inline_disable_url: https://bandit.readthedocs.io/en/latest/config.html#suppressing-individual-lines
    cli_lint_mode: list_of_files
    config_file_name: ".bandit.yml"
    cli_lint_errors_count: regex_count
    cli_lint_errors_regex: ">> Issue: \\["
    version_extract_regex: "(?<=bandit )\\d+(\\.\\d+)+"
    test_folder: python_bandit
    examples:
      - "bandit myfile.py"
      - "bandit --configfile .bandit.yml myfile.py"
    install:
      pip:
        - bandit
    ide:
      atom:
        - name: bandit-lint
          url: https://atom.io/packages/bandit-lint
      sublime:
        - name: SublimeLinter-bandit
          url: https://github.com/SublimeLinter/SublimeLinter-bandit
      vscode:
        - name: Native Support
          url: https://code.visualstudio.com/docs/python/linting#_bandit
  # MYPY
  - linter_name: mypy
    name: PYTHON_MYPY
    linter_text: |
      Optional static typing checks for python

      If you don't use python static typing, you should disable this linter by adding `- PYTHON_BANDIT` in `DISABLE_LINTERS` variable in your `.mega-linter.yml` config file
    linter_url: https://mypy.readthedocs.io/en/stable/
    linter_repo: https://github.com/python/mypy
    linter_banner_image_url: http://mypy-lang.org/static/mypy_light.svg
    linter_rules_configuration_url: https://mypy.readthedocs.io/en/stable/config_file.html
    linter_rules_inline_disable_url: https://mypy.readthedocs.io/en/stable/inline_config.html#inline-config
    linter_megalinter_ref_url: never
    cli_lint_mode: list_of_files
    cli_lint_extra_args:
      - "--install-types"
      - "--non-interactive"
    cli_lint_errors_count: regex_sum
    cli_lint_errors_regex: "Found ([0-9]+) error"
    cli_config_arg_name: "--config-file"
    cli_version_arg_name: "--version"
    config_file_name: ".mypy.ini"
    version_extract_regex: "(?<=mypy )\\d+(\\.\\d+)+"
    test_folder: python_mypy
    examples:
      - "mypy myfile.py"
      - "mypy --config-file .mypy.yml myfile.py"
    install:
      pip:
        - mypy
    ide:
      atom:
        - name: linter-mypy
          url: https://atom.io/packages/linter-mypy
      emacs:
        - name: Flycheck mypy
          url: https://github.com/lbolla/emacs-flycheck-mypy
      idea:
        - name: mypy-official
          url: https://plugins.jetbrains.com/plugin/13348-mypy-official-/
      sublime:
        - name: SublimeLinter-contrib-mypy
          url: https://github.com/fredcallaway/SublimeLinter-contrib-mypy
      vim:
        - name: Ale
          url: https://github.com/dense-analysis/ale
        - name: Syntastic
          url: https://github.com/vim-syntastic/syntastic
      vscode:
        - name: Mypy
          url: https://marketplace.visualstudio.com/items?itemName=matangover.mypy
  # SQLFluff
  - linter_name: sqlfluff
    name: PYTHON_SQLFLUFF
    linter_url: https://docs.sqlfluff.com/en/stable/
    linter_repo: https://github.com/sqlfluff/sqlfluff
    linter_spdx_license: MIT
    linter_rules_url: https://docs.sqlfluff.com/en/stable/rules.html
    linter_rules_configuration_url: https://docs.sqlfluff.com/en/stable/configuration.html
    linter_rules_inline_disable_url: https://docs.sqlfluff.com/en/stable/rules.html#inline-ignoring-errors
    cli_lint_mode: list_of_files
    config_file_name: .sqlfluff
    cli_config_arg_name: "--config"
    cli_lint_errors_count: regex_count
    cli_lint_errors_regex: "L\:"
    examples:
      - "sqlfluff lint test_sql.sql --dialect=mysql"
    install:
      pip:
        - sqlfluff
